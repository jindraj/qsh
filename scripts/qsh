#!/bin/bash

QSH_SCRIPTS="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
QSH_BASE="$QSH_SCRIPTS/.."

# Store some basic information about our execution environment
QSH=$BASH_SOURCE
QSH_PAGER_COMMAND="$QSH_SCRIPTS/qsh-pager"
PANE_ID=$(tmux display-message -p '#{pane_id}')
PID=$$

# Base directory for query editor tmp files
QSH_TMP=/tmp/qsh

# The client pane file, which hosts the SQL client session, and the editor pane file, which is
# running the editor, e.g. vim. Each file will store data related to the opposite pane, so that
# when that pane executes this script it can easily access the information for it's related pane
CLIENT_PANE=$QSH_TMP/client.${PANE_ID}
EDITOR_PANE=$QSH_TMP/editor.${PANE_ID}

# The query file that will be used to transport the single query batch to be executed to the
# SQL client
QSH_EXECUTE_QUERY=${QSH_EXECUTE_QUERY:-$QSH_TMP/execute.${PANE_ID}.sql}
QSH_EXECUTE_QUERY_CURSOR=${QSH_EXECUTE_QUERY_CURSOR:-$QSH_TMP/execute.${PANE_ID}.sql.cursor}

# When invoked from the SQL client, this will contain the file it expects to contain the query
# to execute. The script can, however, also be involved by the editor, in which case this
# script parameter will be empty
OUTPUT_FILE=$1

# Query editor options & default values
QSH_EDITOR_COMMAND=${QSH_EDITOR_COMMAND:-'\e\;'}
QSH_NEWLINE_ON_COMMAND=${QSH_NEWLINE_ON_COMMAND:-1}
QSH_SWITCH_ON_EXECUTE=${QSH_SWITCH_ON_EXECUTE:-0}
QSH_EXECUTE_DELAY=${QSH_EXECUTE_DELAY:-0.1}
QSH_FILE_TYPE=${QSH_FILE_TYPE:-sql}

# The editor to use
QSH_EDITOR=${QSH_EDITOR:-$VISUAL}

# Other variable(s)
QSH_INIT_FILE="init.sh"

# Figure out the client, if we don't already know it
if [[ -z "$QSH_SQL_CLIENT" ]]; then
  # Find the name of the SQL client using qsh
  QSH_SQL_CLIENT=$(echo $(basename $(ps -q $(ps -q $PID -o ppid=) -o comm= | awk '{ print $1 }')));
fi;
 
# Guarantees that the output file will register as changed
function touch_output {
  case $OSTYPE in
    linux*)
      TS=$(date -d '+1 second' +"%Y%m%d%H%M.%S")
      ;;
    darwin*)
      TS=$(date -v+1S +"%Y%m%d%H%M.%S")
      ;;
  esac
  touch -m -t "$TS" $OUTPUT_FILE;
}

# If neither pane file exists, it must mean that this is the first time we are running in this
# window. In that case, perform one-time initialization. We can safely assume this is running from
# the SQL client pane
if [ ! -f "$CLIENT_PANE" ] && [ ! -f "$EDITOR_PANE" ]; then
  # Ensure the base directory exists
  mkdir -p $QSH_TMP;

  # Ensure we have an input file, even if one isn't setup
  if [[ -z "$EDITOR_FILE" ]]; then
    EDITOR_FILE=$QSH_TMP/query.${PANE_ID//%/}.$QSH_FILE_TYPE
  fi;

  # If we don't have a SQL client directory for the current client, use the generic client
  if [[ ! -d "$QSH_BASE/clients/$QSH_SQL_CLIENT" ]]; then
    QSH_SQL_CLIENT="generic"
  fi;

  # If we are aware of the editor, look for an env file to use for initialization
  QSH_ENV="$QSH_BASE/clients/$QSH_SQL_CLIENT/.qshenv";
  [[ ! -f "$QSH_ENV" ]] && QSH_ENV="$QSH_BASE/clients/generic/.qshenv";

  # Setup environment
  source "$QSH_ENV";

  # Create the editor pane, and pass all options and other values to it. Also ensure that if the
  # editor is closed, all pane files are cleaned up. This allows for the editor to be re-opened
  # again in the same tmux window without issue, and reduces the proliferation of tmp files
  EDITOR_PANE_ID=$(tmux split-window "export QSH='$QSH' \
                                             QSH_ENABLE=1 \
                                             QSH_CONNECTION='$QSH_CONNECTION' \
                                             QSH_INVOCATION='$QSH_INVOCATION' \
                                             QSH_EXECUTE_QUERY='$QSH_EXECUTE_QUERY' \
                                             QSH_EXECUTE_QUERY_CURSOR='$QSH_EXECUTE_QUERY_CURSOR' \
                                             QSH_PAGER='$QSH_PAGER' \
                                             QSH_EDITOR_COMMAND='$QSH_EDITOR_COMMAND' \
                                             QSH_NEWLINE_ON_COMMAND='$QSH_NEWLINE_ON_COMMAND' \
                                             QSH_SWITCH_ON_EXECUTE='$QSH_SWITCH_ON_EXECUTE' \
                                             QSH_EXECUTE_DELAY='$QSH_EXECUTE_DELAY' \
                                             QSH_SQL_CLIENT='$QSH_SQL_CLIENT' \
                                             PANE_ID=$(tmux display-message -p '#{pane_id}');
                                      $QSH_EDITOR $EDITOR_FILE; \
                                      rm -f $QSH_TMP/editor.$PANE_ID; \
                                      rm -f $CLIENT_PANE;" \; \
                   swap-pane -U \; \
                   display-message -p '#{pane_id}');

  # Store the pane for the editor in the client pane file
  echo $EDITOR_PANE_ID > $CLIENT_PANE;

  # Store this (the SQL client) pane ID in the editor pane file
  echo ${PANE_ID} > $QSH_TMP/editor.${EDITOR_PANE_ID};

  # If there is a SQL client specific initialization script, use that, otherwise use the generic
  # version, which should be fine for most database platforms
  QSH_INIT="$QSH_BASE/clients/$QSH_SQL_CLIENT/$QSH_INIT_FILE";
  [[ ! -f "$QSH_INIT" ]] && QSH_INIT="$QSH_BASE/clients/generic/$QSH_INIT_FILE";

  # Initialize qsh and put up a nice message to let the user know we're good to go
  "$QSH_INIT" "$PANE_ID" "$QSH_SQL_CLIENT" "$QSH_PAGER_COMMAND" "$QSH_NO_CHANGE_PROMPT" \
    "$QSH_PROMPT" "$OUTPUT_FILE";

  # Ensure the modified datetime of the output file looks legit
  touch_output;

  exit 0;
fi;

# If the EDITOR_PANE file exists, it must mean the editor is running this script, so perform
# editor-side processing. Normally this is the case when the editor wants to send a query to
# the SQL client
if [[ -f "$EDITOR_PANE" ]]; then
  # Capture details of the SQL client from the editor pane file
  CLIENT_PANE_ID=$(cat $EDITOR_PANE);
  CLIENT_PID=$(tmux list-panes -F '#{pane_id}.#{pane_pid}' | grep "^${CLIENT_PANE_ID}[.]" \
               | cut -d . -f 2);

  # There may be results currently being displayed in the SQL client with a pager, so in that case
  # we'll need to exit out of the pager before sending over the new query
  if [[ ! -z "$(pstree $CLIENT_PID | grep $(basename $QSH_PAGER_COMMAND))" ]]; then
    tmux send-keys -t $CLIENT_PANE_ID "C-m";
    tmux send-keys -t $CLIENT_PANE_ID "q";

    # If there are a lot of results, sometimes it can take a little while for the pager to exit,
    # so loop until we can be sure it has stopped
    while [[ ! -z "$(pstree $CLIENT_PID | grep $(basename $QSH_PAGER_COMMAND))" ]]; do
      sleep 0.5;
    done;
  fi;

  # Files used for result requests, i.e. where we will return results back to the editor, rather
  # than actually displaying them on the screen. This is used for enhanced query editing.
  RESULT_REQUEST="$QSH_TMP/client.${CLIENT_PANE_ID}.result-request";
  RESULT_REQUEST_QUERY="${RESULT_REQUEST}.sql";
  RESULT_REQUEST_CONTEXT="${RESULT_REQUEST}.context";
  RESULT_REQUEST_CURSOR="${RESULT_REQUEST}.cursor";
  RESULT_REQUEST_OUTPUT="${RESULT_REQUEST}.output";
  RESULT_REQUEST_COMPLETE="${RESULT_REQUEST}.complete";
  RESULT_REQUEST_FINALIZED="${RESULT_REQUEST}.finalized";

  # Client specific handler for handling result requests
  QSH_RESULT_REQUEST_HANDLER=$QSH_BASE/clients/$QSH_SQL_CLIENT/qsh-result-request-handler
  if [[ ! -f "$QSH_RESULT_REQUEST_HANDLER" ]]; then
    QSH_RESULT_REQUEST_HANDLER=$QSH_BASE/clients/generic/qsh-result-request-handler
  fi;

  # Delete any previous result request file(s)
  rm -f ${RESULT_REQUEST}*;

  # Operation types
  OPERATION_TYPE_QUERY=query
  OPERATION_TYPE_SCRIPT=scripts
  OPERATION_TYPE_SNIPPET=snippets
  OPERATION_TYPE_COMPLETION=completion

  # The default operation type
  OPERATION_TYPE=$OPERATION_TYPE_QUERY

  # Helper function to finalize a result request
  function finalize_result_request {
    if [[ -f "$RESULT_REQUEST_OUTPUT" ]]; then
      # Print the output so that it can be picked up by the editor
      cat "$RESULT_REQUEST_OUTPUT";
    fi;

    # Delete any previous result request file(s)
    rm -f ${RESULT_REQUEST}*;
  }

  # Check for parameters, which are used to override the default 'sql' action and perform alternative
  # processing, such as executing a script
  if [[ $# -gt 0 ]]; then
    OPERATION_TYPE=$1
  fi;

  case $OPERATION_TYPE in
    $OPERATION_TYPE_QUERY)
      # Default processing, nothing to do
      ;;

    $OPERATION_TYPE_SCRIPT)
      # Figure out the script to be called and it's parameters
      QUERY_SCRIPT=$(echo "$2" | awk -F " " '{ print $1; }');
      SCRIPT_PARAMETERS=$(echo "$2" | awk -F " " '{ $1=""; print $0; }');
      ;;

    $OPERATION_TYPE_SNIPPET)
      # Figure out the script to be called and it's parameters
      QUERY_SCRIPT=$(echo "$2" | sed 's/\([^( ]\+\)[[:space:]]*(\(.*\))/\1/g');
      SCRIPT_PARAMETERS=$(echo "$2" | sed 's/[^( ]\+[[:space:]]*(\(.*\))/\1/g');

      # Copy in other files if they exist
      [[ -f "$QSH_EXECUTE_QUERY" ]] && cp "$QSH_EXECUTE_QUERY" "$RESULT_REQUEST_CONTEXT";
      [[ -f "$QSH_EXECUTE_QUERY_CURSOR" ]] && cp "$QSH_EXECUTE_QUERY_CURSOR" "$RESULT_REQUEST_CURSOR";
      ;;
  esac;

  # If we are running a script or a snippet, make sure the requested script exists
  if [ "$OPERATION_TYPE" == "$OPERATION_TYPE_SCRIPT" ] || \
     [ "$OPERATION_TYPE" == "$OPERATION_TYPE_SNIPPET" ]; then
    # Locate the client query script to call
    QSH_QUERY_SCRIPT=$QSH_BASE/clients/$QSH_SQL_CLIENT/$OPERATION_TYPE/$QUERY_SCRIPT;
    if [[ ! -f "$QSH_QUERY_SCRIPT" ]]; then
      echo "Invalid script '$QUERY_SCRIPT'";
      exit -1;
    fi;
  fi;

  # Record whether we end up switching panes or not
  PANE_SWITCHED=

  # This loop is really for the purposes of snippets that need to perform multiple queries in order
  # to produce a result. For other operation types, the loop will be exited after the first iteration
  while :
  do
    # If a snippet is being processed, check whether the process has now been finalized, which means
    # that no further processing is required and we can simply return the results to the client.
    # Otherwise, create the file that will signal the to QSH pager that we require results returned
    # to use. When it sees this file, it will output the results to a file, rather than to the screen
    case $OPERATION_TYPE in
      $OPERATION_TYPE_SCRIPT)
        # For scripts, execute the requested script file
        "$QSH_QUERY_SCRIPT" "$QSH_EXECUTE_QUERY" "$SCRIPT_PARAMETERS";
        if [[ $? -ne 0 ]]; then
          exit -1;
        fi;
        ;;

      $OPERATION_TYPE_SNIPPET)
        if [[ -f "$RESULT_REQUEST_FINALIZED" ]]; then
          finalize_result_request;
          break;
        fi;

        # We have more data to process, so ensure the pager returns results to use
        touch "$RESULT_REQUEST";
        rm -f "$RESULT_REQUEST_QUERY" "$RESULT_REQUEST_COMPLETE";

        # For snippets, execute the requested script file, providing access to the result request 
        "$QSH_QUERY_SCRIPT" "$RESULT_REQUEST" "$RESULT_REQUEST_QUERY" "$SCRIPT_PARAMETERS";
        if [[ $? -ne 0 ]]; then
          # The result request output should contain the error information
          finalize_result_request;
          exit -1;
        fi;

        # Check again to see if the result has been finalized
        if [[ -f "$RESULT_REQUEST_FINALIZED" ]]; then
          finalize_result_request;
          break;
        fi;

        # Remove temporary files
        rm -f "$RESULT_REQUEST_OUTPUT";

        # Generate a new query file with the required additions for result requst processing
        $QSH_RESULT_REQUEST_HANDLER "$RESULT_REQUEST" "$QSH_EXECUTE_QUERY";
        ;;
    esac;

    if [[ -z "$PANE_SWITCHED" ]]; then
      # Switch over to the SQL client pane when executing a query, to ensure it becomes visible
      tmux select-pane -t $CLIENT_PANE_ID;
      PANE_SWITCHED=1
    fi;

    # Finally, trigger the editor in the SQL client, which will cause it to re-enter this script. We
    # need that to happen so that it can pick up the query file and execute it
    tmux send-keys -t $CLIENT_PANE_ID "$QSH_EDITOR_COMMAND";

    # Add a newline, if we have to
    if [[ $QSH_NEWLINE_ON_COMMAND -eq 1 ]]; then
      tmux send-keys -t $CLIENT_PANE_ID "C-m";
    fi;

    # For snippets, we will have to wait until the operation is complete, and potentially loop again
    if [[ "$OPERATION_TYPE" == "$OPERATION_TYPE_SNIPPET" ]]; then
      # Wait for the signal from the pager that we are done
      while [[ ! -f "$RESULT_REQUEST_COMPLETE" ]]; do
        sleep 0.2;
      done;
    else
      # Looping is not required for other operation types
      break;
    fi;
  done;

  # If configured to NOT switch to the client on query execute, switch back to the editor, after
  # a small artifical delay to ensure the SQL client pane starts executing the $QSH_EDITOR_COMMAND
  if [ "$QSH_SWITCH_ON_EXECUTE" != "1" ] && [ ! -z "$PANE_SWITCHED" ]; then
    sleep $QSH_EXECUTE_DELAY && tmux select-pane -l;
  fi;

  exit 0;
fi;

# If we are still here, this is being executed by the SQL client, and only in the case where there
# is a query file to be processed, which should be stored in $QSH_EXECUTE_QUERY. All we need to do is
# copy the contents of the SQL file to the location requested by the SQL client, i.e. $OUTPUT_FILE,
# which will then pick it up and execute it. A copy is used instead of move to not invalidate open
# file handles
if [[ -f "$QSH_EXECUTE_QUERY" ]]; then
  # If there is a finalizer for the current client, use it
  QSH_INPUT_FINALIZER=$QSH_BASE/clients/$QSH_SQL_CLIENT/qsh-input-finalizer
  if [[ -f "$QSH_INPUT_FINALIZER" ]]; then
    "$QSH_INPUT_FINALIZER" "$QSH_EXECUTE_QUERY";
  fi;

  cp "$QSH_EXECUTE_QUERY" /tmp/debug.sql
  # Send the query to it's final destination
  cat "$QSH_EXECUTE_QUERY" > "$OUTPUT_FILE";
fi;

# Remove qsh files
rm -f "$QSH_EXECUTE_QUERY" "$QSH_EXECUTE_QUERY_CURSOR";

# Ensure the modified datetime of the output file looks legit
touch_output;

